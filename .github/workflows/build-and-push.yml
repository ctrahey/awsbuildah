name: Multiarch build
on:
  push:

env:
  IMAGE_TAG: latest

jobs:
  build-multiplatform-containerfile:
    name: Build multi-platform image using Containerfile
    env:
      IMAGE_NAME: awsbuildah-multiplatform
      IMAGE_TAGS: v1 ${{ github.sha }}
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      REGISTRY_USER: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ github.token }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: configure-storage
        id: config-storage
        run: |
          mkdir -p ~/.config/containers
          cat <<EOF > ~/.config/containers/storage.conf
          [storage]
          # Default Storage Driver, Must be set for proper operation.
          driver = "overlay"
          graphroot = "$HOME/.local/share/containers/storage"
          EOF
      - name: Cache Buildah
        id: cache-buildah
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/buildah
          key: ${{ runner.os }}-build-buildah-binary
      - name: Cache runc
        id: cache-runc
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/runc
          key: ${{ runner.os }}-build-runc-binary
      - name: Install qemu dependency
        run: |
          sudo apt-get -y -qq update
          sudo apt-get install -y qemu-user-static
          BUILDAH_VERSION=$(curl --silent "https://api.github.com/repos/containers/buildah/releases/latest" | grep -i "tag_name" | sed -E 's/.*"v([^"]+)".*/\1/')
          if buildah --version | grep -q $BUILDAH_VERSION; then
              echo "Buildah version already matches latest release, exiting this step as success"
              exit 0
          fi
          sudo apt-get -y install bats btrfs-progs git libapparmor-dev libdevmapper-dev libglib2.0-dev libgpgme11-dev libseccomp-dev libselinux1-dev skopeo go-md2man make
          sudo apt-get -y install golang-1.18
          mkdir ~/buildah
          cd ~/buildah
          export GOPATH=`pwd`
          git clone -b v${BUILDAH_VERSION} https://github.com/containers/buildah ./src/github.com/containers/buildah
          cd ./src/github.com/containers/buildah
          PATH=/usr/lib/go-1.18/bin:$PATH make runc all SECURITYTAGS="apparmor seccomp"
          sudo make install install.runc
          which buildah
          buildah --version
          buildah --help
          ls -l /usr/local/bin/buildah
      - name: Cache image layers
        id: cache-layers
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.local/share/containers/storage/
          key: ${{ runner.os }}-build-layers-cache
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64, linux/arm64
          layers: true
          containerfiles: |
            ./Dockerfile
      - name: Echo Outputs
        run: |
          echo "Image: ${{ steps.build_image.outputs.image }}"
          echo "Tags: ${{ steps.build_image.outputs.tags }}"
          echo "Tagged Image: ${{ steps.build_image.outputs.image-with-tag }}"
      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'
      - name: Check manifest
        run: |
          set -x
          buildah manifest inspect ${{ steps.build_image.outputs.image }}:${{ env.IMAGE_TAG }}
      - name: Run image
        run: |
          buildah --storage-driver overlay images
          echo now showing podman images
          podman --storage-driver overlay images ls
          podman run --storage-driver overlay --rm ${{ steps.build_image.outputs.image }}:${{ env.IMAGE_TAG }}
      - name: Push To ghcr
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          
